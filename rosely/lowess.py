"""
This module implements the Lowess function for nonparametric regression.

Functions:
lowess Fit a smooth nonparametric regression curve to a scatterplot.

For more information, see

William S. Cleveland: "Robust locally weighted regression and smoothing
scatterplots", Journal of the American Statistical Association, December 1979,
volume 74, number 368, pp. 829-836.

William S. Cleveland and Susan J. Devlin: "Locally weighted regression: An
approach to regression analysis by local fitting", Journal of the American
Statistical Association, September 1988, volume 83, number 403, pp. 596-610.
"""

# Authors: Jiang-Nan Yang
#
# License: BSD (3-clause)

import numpy as np
from scipy import linalg
import logging, sys, execnet, time

def call_python_version(Version, Module, Function, ArgumentList):
    gw      = execnet.makegateway("popen//python=python%s" % Version)  # @UndefinedVariable
    channel = gw.remote_exec("""
        import sys
        if 'rudolphLab/scripts' not in sys.path: sys.path.insert(0, '/Users/jiangnan/Documents/rudolphLab/scripts')
        from %s import %s as the_function
        channel.send(the_function(*channel.receive()))
    """ % (Module, Function))
    channel.send(ArgumentList)
    res = channel.receive()
    execnet.default_group.terminate()  # @UndefinedVariable
    return res

def python2_loess_fit(x, y, w, span, get_stderror, statistics):
    from pyloess import loess  # @UnresolvedImport
    lo = loess(x, y, span=span, statistics=statistics, weights=w)
    lo.fit()
    yfit = lo.outputs.fitted_values.tolist()
    if get_stderror: 
        stderr = lo.predict(x, stderror=True).stderr
        return yfit, stderr.tolist()
    else: return yfit

def loess_fit(x0, y0, w=None, span=0.8, get_stderror=False, statistics='approximate'):
    x0 = np.array(x0); y0 = np.array(y0)
    notnanidx = np.logical_not(np.logical_or(np.isnan(x0), np.isnan(y0)))
    sortidx = x0[notnanidx].argsort()
    revidx  = sortidx.argsort()
    x = x0[notnanidx][sortidx].tolist(); y = y0[notnanidx][sortidx].tolist()
    if w is not None: w = np.array(w)[notnanidx][sortidx].tolist()
    if sys.version_info < (3, 0):
        yfit = python2_loess_fit(x, y, w, span, get_stderror, statistics)
    else:
        try: yfit = call_python_version("2.7", "rosely.lowess", "python2_loess_fit",  
                                        [x, y, w, span, get_stderror, statistics])
        except: print(x0, y0); raise 
    if get_stderror:
        yfit, stderr = yfit
        retstderr = x0 * 0.;
        retstderr[notnanidx] = np.array(stderr)[revidx]
    retyfit = x0 * 0.
    retyfit[notnanidx] = np.array(yfit)[revidx]
    if get_stderror: return retyfit, retstderr
    else: return retyfit


def lowess(x, y, f=None, iters=3):
    """lowess(x, y, f=None, iters=3) -> yest

    Lowess smoother: Robust locally weighted regression.
    The lowess function fits a nonparametric regression curve to a scatterplot.
    The arrays x and y contain an equal number of elements; each pair
    (x[i], y[i]) defines a data point in the scatterplot. The function returns
    the estimated (smooth) values of y. NaN is allowed.

    The smoothing span is given by f. A larger value for f will result in a
    smoother curve. If f is None, it will be set as (1./nn) ** 0.25 where nn 
    is the number of unique values.
    The number of robustifying iterations is given by iters. The
    function will run faster with a smaller number of iterations.
    """
    n = len(x); setx = set(x); nNaN = np.sum(np.isnan(x)); nn = len(setx) - np.sum(np.isnan(list(set(x)))) 
    x = np.float64(x); y = np.float64(y); x[np.isnan(y)] = np.nan; y[np.isnan(x)] = np.nan
    if f is None: f = (1./nn) ** 0.25
    try: r = int(0.5 + (f * (n - nNaN)))
    except: 
        logging.exception('lowess error')
        print(f, n, nNaN, nn)
    h = [np.sort(np.abs(x - x[i]))[r] for i in range(n)]
    w = x[:, None] - x[None, :]
    for i in range(n):  # Do not use matrix. Use a loop to halve the memory requirement for large n
        w[i] = np.clip(np.abs(w[i]/h), 0.0, 1.0); w[i] = (1 - w[i] ** 3) ** 3
    yest = np.zeros(n)#; yest1 = 0
    delta = np.ones(n)
    for _ in range(iters):
        for i in range(n):
            weights = delta * w[:, i]
            wy = weights * y; wx = weights * x; sumwx = np.nansum(wx)
            b = np.array([np.nansum(wy), np.nansum(wy * x)])
            A = np.array([[np.nansum(weights), sumwx],
                          [sumwx, np.nansum(wx * x)]])
            try: beta = linalg.solve(A, b)
            except: beta = [np.nan] * len(b)
            yest[i] = beta[0] + beta[1] * x[i]

        residuals = y - yest
        s = np.nanmedian(np.abs(residuals))
        delta = np.clip(residuals / (6.0 * s), -1, 1)
        delta = (1 - delta ** 2) ** 2
#         if it==0: yest1 = yest + 0.

    return yest#, yest1

if __name__ == '__main__':
    n = 1000
    x = np.random.uniform(0, 8*np.pi, size=(n,))
    y = np.sin(x) + np.random.randn(n)
    x[np.random.uniform(0,1, size=(n,)) < 0.1] = np.nan
    y[np.random.uniform(0,1, size=(n,)) < 0.1] = np.nan

    yest = lowess(x, y, iters=3)
    
#     y = np.array([  9.936e-01,   9.178e-02,   9.975e-02,   8.503e-02,   4.203e-02,
#          6.408e-02,   5.894e-02,   7.511e+00,   5.719e-02,   4.165e-01,
#          7.144e-01,   1.363e+00,   1.978e-02,   1.731e-01,   2.984e-01,
#          3.018e-01,   2.238e-01,   2.438e-01,      np.nan,   1.139e-01,
#          3.273e-04,   3.488e-01,   8.881e-02,   1.317e-02,   5.762e-01,
#          2.274e-03,   3.164e-02,   8.914e-01,   2.961e-01,   4.433e-03,
#          9.705e-03,   1.539e-02,   1.184e-01,   8.732e-01,   1.974e-01,
#          1.790e-02,   3.107e-01,   9.471e-01,   4.054e-01,   5.242e-02,
#          1.305e+00,   4.190e-01,   1.269e-03,   1.044e+00,   4.176e-01,
#          9.330e-02,   2.989e-01,   8.564e-01,   1.978e-01,   5.650e-02,
#          2.965e-01,   1.474e-01,   6.258e+00,   2.925e-01,   1.002e-01,
#          1.994e-01,   6.923e-01,   2.625e-03,   4.669e-01,   5.467e-01,
#          2.268e-01,   6.832e-01,   3.823e-01,   2.036e-01,   2.562e-03,
#          2.084e-03,   1.142e-01,   2.426e+00,   7.661e-01,   1.254e+00,
#          1.221e+00,   8.670e-01,   1.071e-02,   4.663e-02,   2.784e-01,
#          2.737e-04,   6.329e-03,   1.467e-02,   6.034e-02,   2.164e-01,
#          3.136e-02,   4.772e-04,   2.460e+00,   1.203e-01,   9.922e-01,
#          2.049e-02,   2.002e-01,   6.116e-01,   9.113e-01,   1.059e-01,
#          1.174e-02,   5.836e-01,   1.239e-02,   1.056e-01,   2.522e-01,
#          3.168e-01,   3.759e-01,   7.637e-01,   3.935e-01,   9.770e-02,
#          3.286e-01,   6.842e-01,   8.073e-02,   2.821e-04,   1.739e-01,
#          3.792e-01,   4.790e-01,   8.026e-01,   1.228e+00,   2.359e-02,
#          5.531e-01,   1.160e+00,   3.040e-01,   3.594e-01,   2.769e-01,
#          4.761e-02,   1.085e-01,   1.220e-01,   7.487e-01,   1.380e+00,
#          4.000e-01,   1.414e-02,   1.171e-01,   2.000e-01,   6.794e-02,
#          6.576e-02,   3.552e-01,   2.110e-03,   6.592e+00,   1.828e-03,
#          2.912e-01,   7.116e-02,   3.408e-01,   3.443e+00,   1.012e-02,
#          7.868e-03,   1.763e-01,   7.371e-02,   2.554e-02,   7.075e-01,
#          7.133e-02,   3.415e-01,   2.248e-02,   3.634e+00,   4.829e-01,
#          2.720e-01,   2.441e-01,   1.496e-01,   9.095e-02,   3.744e-05,
#          1.696e-01,   6.596e-01,   8.151e-02,   1.355e-02,   5.156e-01,
#          1.414e-01,   1.426e+00,   3.418e-01,   6.883e-01,   3.150e-01,
#          4.697e-02,   1.428e-01,   5.077e-04,   2.274e+00,   5.229e-02,
#          1.513e-01,   2.886e-01,   2.026e-01,   1.032e+00,   6.430e-01,
#          1.289e+00,   5.185e-01,   8.111e-01,   5.526e-01,   1.433e-01,
#          6.340e-02,   6.986e-02,   8.500e-02,   6.251e-01,   4.659e-01,
#          1.917e-01,   5.461e-01,      np.nan,   7.298e-02,   6.192e-02,
#          9.501e-02,   1.523e-02,   2.746e-01,   2.320e-01,   9.395e-01,
#          2.679e-01,   7.025e-01,   1.337e-01,   3.072e-02,   4.443e-01,
#          1.168e+00,   1.598e-02,   5.653e-01,   7.785e-01,   1.505e-02,
#          6.009e-02,   2.184e-02,   2.150e-02,   2.085e-01,   2.243e-02,
#          2.545e-01,   1.219e-01,   1.399e-01,   4.916e-07,   7.586e-02,
#          6.669e-01,   1.486e-01,   8.891e-02,   6.084e-02,   1.672e-01,
#          5.433e-01,   3.377e+00,   5.561e-01,   1.363e+00,   2.892e-04,
#          5.901e-02,   6.235e-01,   1.537e-02,   5.759e-01,   1.363e-01,
#          1.077e-01,   1.895e-02,   2.854e-02,   3.957e-01,   5.145e-01,
#          7.971e-01,   1.764e-01,   1.308e+00,   5.182e-02,   5.841e-01,
#          1.935e-01,   1.674e-02,   7.107e-02,   1.182e-01,   7.182e-01,
#          7.749e-02,   7.006e-02,   2.103e-01,   1.462e-03,   1.193e+00,
#          4.767e-01,   1.388e-02,   7.243e-01,   2.163e-02,   2.387e-01,
#          9.346e-02,   2.055e-03,   4.725e-02,   2.076e-01,   1.147e+00,
#          9.773e-02,   5.468e-01,   2.310e-01,   4.824e-01,   1.663e-01,
#          2.223e-01,   4.409e-01,   1.012e-04,   2.757e-01,   5.906e-01,
#          4.119e-03,   5.406e-01,   5.773e-01,   2.254e-02,   5.400e-01,
#          2.387e-01,   9.711e-02,   5.392e-01,   5.053e-01,   3.071e-01,
#          8.848e-02,   1.454e-01,   5.249e-01,   6.077e-01,   3.560e-01,
#          4.870e-01,   2.054e-02,   4.312e+00,   1.165e+00,   8.471e-01,
#          6.193e-03,   1.110e-01,   2.023e-01,   6.892e-03,   1.697e-02,
#          4.192e-01,   5.365e-02,   2.824e-02,   2.874e-02,   1.235e-01,
#          4.957e-01,   1.949e-03,   2.819e-05,   2.809e-02,   8.953e-02,
#          9.124e-01,   6.724e-01,   2.694e-03,   1.107e-02,   1.206e-01,
#          7.317e-02,   3.793e-02,   2.264e+00,   4.469e-02,   5.786e-03,
#          1.862e-02,   2.350e+00,   2.987e-01,   4.762e-01,   4.444e+00,
#          3.730e-02,   1.394e+00,   7.730e-01,   2.637e-01,   8.298e-02,
#          9.211e-02,   1.263e+00,   1.145e+01,   9.801e-01,   2.064e-01,
#          9.046e-01,   5.562e+00,   5.938e-01,   2.973e-02,   2.243e-03,
#          2.102e-02,      np.nan,   1.530e-01,   9.911e-01,   1.391e+00,
#          2.552e-01,   1.553e-01,   2.523e-01,   2.179e-01,   1.314e+00,
#          3.998e-01,   2.286e+00,   5.772e-01,   4.973e-02,   2.478e-01,
#          2.822e-01,   9.805e-01,   9.220e-02,   1.962e-02,   8.412e-03,
#          1.779e-01,   1.329e+00,   7.431e-03,   1.153e-02,   8.515e-01,
#          6.959e-01,   2.713e-01,   6.477e-02,   4.153e-01,   6.225e-02,
#          5.888e-01,   1.250e-03,   4.035e-03,   3.791e+00,   8.100e-01,
#          4.831e+00,   5.127e-01,   7.054e-01,   3.083e-01,   2.531e-01,
#          1.622e-01,   4.485e-01,   2.034e-03,   3.207e+01,   6.050e-01,
#          3.639e-04,   3.606e-01,   6.409e-01,   3.677e-02,   4.228e-02,
#          1.063e-01,   1.963e-01,   4.298e-01,   5.076e-04,   8.174e-01,
#          1.866e-02,   5.683e-01,   5.710e-03,   2.711e-01,   1.625e-01,
#          5.969e-02,   1.215e+00,   2.097e-02,   4.800e-01,   2.329e-01,
#          1.300e-02,   1.049e-01,   4.553e-02,   6.305e-01,   1.748e-01,
#          3.809e-01,   5.563e-01,   2.701e-01,   1.028e-01,   1.580e-02,
#          3.871e-02,   3.771e-02,   1.975e-01,   3.974e-01,   1.925e-02,
#          3.974e-01,   5.816e-01,   6.575e-03,   1.306e-03,   3.455e-01,
#          2.714e-01,   1.326e-01,      np.nan,   7.920e-01,   2.948e-01,
#          1.659e-01,   1.398e-01,   1.501e-03,   6.908e-02,   9.772e-03,
#          7.876e-03,   8.706e-01,   8.392e-02,   2.695e-01,   1.981e-01,
#          4.104e-01,   5.013e-01,   6.842e-02,   1.829e-01,   1.024e+00,
#          3.857e-01,   2.117e-01,   2.621e-01,   7.576e-01,   1.954e-05,
#          5.918e-01,   3.606e-02,   3.063e-01,   1.375e-02,   5.735e-01,
#          2.701e+00,   6.467e-03,   1.079e+00,   5.066e-02,   2.121e+00,
#          2.248e+00,   2.535e+00,   2.708e+00,   3.014e-01,   1.074e+00,
#          7.513e-07,   5.931e-02,   7.883e-02,   1.294e-02,   2.858e-01,
#          2.272e-01,   9.825e-02,   2.726e-07,   7.331e-01,   1.582e+00,
#          5.255e-01,   5.244e-01,   4.680e-01,   3.004e-01,   4.422e+00,
#          1.660e-01,   2.430e-01,   7.243e-02,   3.613e-02,   1.910e-01,
#          4.325e-01,   1.518e-01,   1.376e+00,   3.417e-02,   6.264e-02,
#          2.304e-02,   5.221e-02,   5.702e-01,   2.674e-01,   8.809e-02,
#          8.788e-02,   3.146e-01,   8.639e-05,   2.978e-02,   1.254e-01,
#          1.683e-01,   1.030e-02,   2.325e-01,   1.960e-03,   2.372e-01,
#          6.978e-03,   1.140e-02,   7.834e-02,   3.205e-04,   1.161e-02,
#          3.535e-04,   4.135e-01,   5.493e-01,   2.060e-01,   5.937e-01,
#          4.946e+00,   1.477e+00,   4.204e-02,   3.279e-02,   2.257e-02,
#          3.915e-03,   8.761e-02,   4.486e-01,   3.921e+00,   1.613e-01,
#          4.873e-01,   1.071e-02,   4.324e-01,   7.787e-02,   2.329e-01,
#          1.605e+00,   2.043e-01,   1.217e+00,   8.751e-02,   6.657e-01,
#          3.259e-01,   1.863e+00,   5.978e-04,   5.112e-02,   2.021e-01,
#          3.310e-01,   5.609e-03,   3.012e-01,   1.789e-01,   4.233e-03,
#          2.261e-02,   9.854e-02,   1.261e-01,   2.736e-02,   6.784e-01,
#          1.546e-01,   5.812e-02,   6.260e-01,   6.797e+00,   3.886e-02,
#          3.702e-02,   6.625e-01,   2.356e-01,   4.377e-01,   1.736e-01,
#          1.611e+00,   3.352e-01,   3.719e-01,   1.138e-01,   1.543e-02,
#          1.099e+00,   2.998e-02,   5.623e-01,   1.181e+00,   2.777e-01,
#          2.333e+00,   9.295e-03,   6.148e-03,   4.303e-01,   3.365e-02,
#          2.056e+00,   2.625e-02,   1.315e-02,   3.873e-02,   1.060e+00,
#          2.949e-02,   7.800e-02,   1.829e-03,   4.877e-01,   5.302e-04,
#          6.151e-02,   3.202e-04,   6.478e-02,   3.869e-01,   8.654e-01,
#          1.526e-02,   4.702e-01,   6.289e-02,   5.670e-02,   1.931e-01,
#          3.587e-01,   9.889e-02,   7.699e-01,   6.254e-07,   8.796e-02,
#          4.285e-01,   9.147e-01,   1.219e-01,   2.804e-02,   3.121e-01,
#          2.130e+00,   5.433e-01,   5.909e-02,   2.812e-01,   1.752e-01,
#          9.190e-04,      np.nan,   6.045e-01,   4.659e-01,   3.004e-01,
#          7.934e-01,   1.297e-01,   1.489e-01,   6.558e-01,   9.295e-01,
#          1.149e-02,   4.571e-02,   5.176e-01,   2.065e-01,   9.972e-01,
#          2.183e-01,   5.004e-02,   3.940e-06,   4.288e-01,   3.936e-02,
#          7.541e-01,   7.308e+00,   8.041e-01,   3.921e-01,   1.751e-01,
#          3.283e-01,   6.421e-03,   4.308e-04,   1.124e+00,   5.072e-01,
#          1.279e+01,   3.219e-02,   1.758e-01,   9.408e-02,   6.303e-01,
#          2.411e-01,   2.080e-01,   2.719e-02,   1.799e-02,   7.748e-03,
#          7.988e-02,   3.133e-01,   8.639e-03,   6.617e-03,   9.417e-02,
#          1.109e+00,   6.602e-01,   1.982e-02,   9.833e-01,   5.615e-02,
#          2.688e-01,   1.933e-02,   1.221e-01,   2.839e-02,   3.646e-01,
#          4.419e-01,   2.979e+00,   1.351e+00,   4.838e-05,   7.256e-01,
#          1.710e-01,   1.665e-04,   2.207e-01,   2.507e-01,   1.113e-01,
#          1.825e+00,   6.221e-01,   1.147e-01,   3.311e-01,   3.334e-02,
#          6.498e-01,   7.469e-02,   5.875e-01,   2.239e-01,   1.138e+00,
#             np.nan,   1.357e+00,   1.829e-01,   6.337e-02,   2.284e-01,
#          9.391e-01,   1.747e-01,   1.380e-01,   2.252e-01,   1.862e-01,
#          7.635e-02,   1.093e-01,   2.094e-05,   3.667e-02,   2.974e-01,
#          3.318e-01,   1.969e+00,   7.511e-02,   6.855e-01,   4.707e-01,
#          1.080e+00,   3.635e-01,   4.568e-01,   2.113e-01,   5.040e-01,
#          1.124e-01,   6.524e-01,   1.697e-01,   4.190e-01,   2.625e-01,
#          2.642e-01,   2.321e-01,   7.146e-01,   4.466e-03,   2.139e-02,
#          5.263e-01,   6.142e-02,   2.813e+00,   2.298e+00,   4.675e-03,
#          5.791e-01,   3.297e-02,   5.760e-01,   2.615e-01,   1.411e-01,
#          1.606e-01,   6.242e-02,   1.224e-01,   4.626e-03,      np.nan,
#          4.156e-01,   7.562e-01,   8.306e-02,   1.037e-01,   4.114e+00,
#          2.604e-01,   4.409e+00,   9.631e-01,   6.698e-01,   5.397e+00,
#          3.054e+00,   1.574e-03,   2.028e-01,   3.909e-02,   4.413e-02,
#          4.485e-01,   2.409e+00,   3.011e-01,   1.092e-02,   9.467e-01,
#          8.554e-01,   6.760e-01,   4.830e-02,   6.210e-01,   6.738e-02,
#          8.399e-01,   1.404e-01,   3.199e-01,   1.334e-01,   8.526e-01,
#          4.384e-04,   1.808e+00,   2.838e-01,   4.082e-01,   2.572e-03,
#          6.292e-02,   6.090e-02,   7.955e-01,   5.212e-04,   6.464e-01,
#          8.606e-02,   1.455e-01,   2.461e-01,   4.774e-01,   1.020e-02,
#          2.023e-03,   7.511e-02,   3.865e-02,   2.199e-01,   8.341e-02,
#          6.426e-01,   4.010e-02,   2.573e-03,   7.962e+00,   1.449e-02,
#          5.487e-01,   4.604e-01,   4.840e-02,   5.035e-03,   8.736e-01,
#          1.560e+00,   3.025e-02,   9.559e-02,   3.984e-01,   4.917e-01,
#          1.110e-01,   4.465e-04,   2.566e-01,   8.645e-01,   1.803e-01,
#          1.915e-01,   6.451e-01,   7.260e-06,   2.343e+00,   9.948e-02,
#          9.247e-02,   2.385e-01,   3.822e-01,   1.878e-01,   1.793e-01,
#          2.263e+00,   9.266e-02,   3.351e-01,   1.464e-01,   4.650e-02,
#          1.250e-01,   6.797e-02,   1.708e-01,   1.509e-01,   1.310e-02,
#          6.869e-02,   2.538e-01,   7.288e-02,   8.619e-03,   2.098e-01,
#          1.035e-02,   3.164e-01,   5.047e-02,   4.676e-01,   5.961e-03,
#          5.164e-01,   7.971e-01,   3.341e-02,   4.402e-01,   6.599e-02,
#          1.026e+00,   1.303e-01,   1.764e-01,   1.750e-01,   3.334e-01,
#          1.530e-01,   5.871e-02,   2.106e-02,   6.982e-02,   1.136e-01,
#          1.011e+00,   2.091e+00,   4.679e-01,   1.581e-02,   6.405e-01,
#          1.045e-01,   5.872e-02,   3.907e-02,   3.831e-02,   3.090e-01,
#          3.194e-01,   4.307e-01,   1.244e-01,   1.255e-01,   1.003e+00,
#          2.875e-01,   3.068e-01,   1.648e-03,   3.631e-01,   1.530e-01,
#          1.808e-02,   8.158e-01,   1.723e-01,   8.236e-01,   1.267e+00,
#          9.683e-03,   3.097e-01,   9.095e-01,   2.748e-03,   3.330e-01,
#          5.799e-02,   3.094e-03,   1.283e-01,   1.264e-03,   3.929e-06,
#          3.831e-01,   1.468e-02,   5.548e-02,   1.722e-01,   2.615e-01,
#          2.382e-04,   1.027e-03,   5.211e-03,   4.425e-01,   9.610e-02,
#          3.167e-02])
#     x = np.array([  4.,   6.,   8.,   8.,  11.,   8.,   8.,   5.,  17.,   7.,  10.,
#          7.,   9.,   5.,   2.,   5.,   7.,   7.,  np.nan,   9.,   7.,   7.,
#         11.,  13.,  11.,   5.,  13.,  12.,   7.,   6.,  11.,   7.,   2.,
#          7.,   5.,  16.,  13.,  13.,  14.,   8.,  12.,  11.,   7.,   3.,
#          5.,  13.,  19.,   8.,   7.,   9.,  17.,   7.,   2.,  10.,   6.,
#          5.,   8.,   8.,   6.,   8.,  10.,  10.,  10.,   5.,   6.,  17.,
#          4.,   9.,   6.,  10.,   7.,   5.,  15.,   7.,   8.,  10.,   7.,
#         12.,  13.,   9.,  11.,   6.,   4.,   5.,   7.,  10.,   7.,   5.,
#         11.,  11.,  10.,   6.,   8.,  10.,  10.,   8.,   5.,   3.,  17.,
#          5.,  17.,   4.,   8.,   5.,  11.,  13.,  13.,   2.,   5.,   8.,
#          8.,   7.,  11.,   6.,  10.,   4.,  11.,   8.,  10.,   4.,   5.,
#          9.,  11.,   7.,   4.,  10.,   5.,  19.,   1.,   9.,   7.,  11.,
#         11.,   4.,  10.,   6.,   2.,   3.,   9.,  12.,  12.,   8.,   8.,
#          6.,   8.,   1.,   5.,  18.,  10.,  15.,  10.,  17.,   7.,   5.,
#          5.,  11.,   6.,   7.,   9.,   5.,   9.,   7.,  12.,   5.,  12.,
#         12.,  10.,   7.,   9.,   8.,   4.,   3.,   3.,  14.,  11.,   8.,
#          1.,  13.,  10.,   9.,  11.,   1.,  np.nan,   4.,   7.,   9.,   1.,
#          7.,  24.,  11.,   9.,   4.,   5.,   1.,  11.,   8.,  11.,  10.,
#         11.,   8.,   9.,   6.,   5.,   7.,   4.,   9.,  12.,  10.,   8.,
#          5.,   8.,   8.,   6.,   7.,  10.,   9.,   5.,  13.,   4.,   9.,
#          8.,   1.,   8.,  10.,   8.,   8.,   6.,  10.,   6.,  12.,  13.,
#          6.,   4.,  15.,   4.,   5.,   9.,   8.,  10.,   3.,  10.,   6.,
#         12.,   7.,   6.,   8.,   8.,   3.,  14.,   8.,   6.,   7.,  11.,
#          5.,   4.,  12.,  13.,   3.,  12.,  16.,   6.,  12.,  12.,   4.,
#          5.,   4.,   2.,  10.,   5.,   6.,  10.,   4.,   9.,   9.,   9.,
#         11.,   3.,   6.,   7.,   4.,   6.,  10.,   6.,   4.,   8.,   5.,
#          7.,   4.,   8.,  15.,   8.,   4.,   8.,   9.,  14.,   9.,   3.,
#          8.,   7.,   7.,   6.,   7.,  10.,   5.,  12.,   5.,   8.,   6.,
#          4.,  13.,   7.,   3.,   4.,  11.,   4.,   5.,   4.,  17.,  10.,
#         14.,   5.,   6.,   1.,  13.,  15.,   3.,   4.,   7.,   7.,   6.,
#          3.,  np.nan,   6.,   7.,   8.,  11.,  16.,   9.,  16.,   5.,  12.,
#          5.,   8.,  12.,   7.,  11.,   9.,  11.,   7.,   8.,   6.,  11.,
#          6.,  16.,   6.,   8.,  12.,  12.,   5.,  10.,  10.,   4.,   6.,
#          6.,   6.,   9.,  14.,   8.,   4.,  15.,   7.,  10.,   5.,   3.,
#          7.,   6.,   9.,   8.,   6.,   9.,   9.,   6.,   9.,  12.,  13.,
#         14.,   7.,   6.,  10.,   7.,   4.,   7.,  12.,   8.,   4.,   7.,
#         12.,  12.,  10.,  13.,  17.,  12.,   7.,  13.,   9.,   5.,   3.,
#          9.,  11.,   7.,   8.,  10.,  13.,   9.,   4.,   7.,   9.,  np.nan,
#          5.,   8.,   5.,   6.,  10.,   8.,   4.,  13.,  14.,  10.,  11.,
#         10.,  13.,  11.,  11.,   8.,   8.,   5.,   4.,   8.,   8.,  15.,
#          7.,  13.,  18.,   8.,   5.,   2.,   8.,   4.,   6.,   4.,   5.,
#          6.,   3.,  11.,  12.,  11.,   9.,  12.,   7.,   8.,   8.,  22.,
#         14.,   4.,   5.,   8.,  15.,   8.,   7.,   4.,   1.,   4.,   5.,
#         11.,   7.,  15.,   8.,   6.,   9.,   9.,   7.,   6.,   7.,  10.,
#          8.,   3.,   7.,  11.,   3.,   6.,   5.,   7.,  13.,   4.,   8.,
#          8.,  11.,  10.,   6.,   4.,  13.,   9.,  10.,  10.,   8.,   2.,
#          5.,   4.,   8.,  15.,   3.,   7.,  10.,   7.,   7.,   8.,   7.,
#          8.,  10.,   5.,   5.,  10.,   5.,   8.,   7.,   8.,   3.,   8.,
#         14.,  15.,  15.,  15.,   6.,  13.,   8.,   6.,   6.,  12.,   6.,
#          9.,  10.,   8.,  11.,   4.,   7.,   8.,  10.,   8.,   2.,   9.,
#          3.,   9.,  11.,  15.,   7.,  10.,   6.,   7.,   6.,   4.,   2.,
#          6.,   3.,   9.,   8.,   5.,   8.,   5.,   8.,  10.,   5.,  13.,
#         15.,  12.,  14.,  22.,  34.,   8.,   8.,   2.,  11.,   9.,   7.,
#          8.,  11.,  10.,   8.,   3.,   6.,   7.,   5.,   2.,   4.,   8.,
#          6.,   6.,   4.,   8.,  15.,  12.,  10.,  np.nan,  10.,   3.,  14.,
#          5.,  22.,   3.,   5.,   8.,   8.,   8.,   5.,   5.,  10.,   5.,
#         10.,   4.,   6.,  10.,   9.,   3.,  10.,  11.,   9.,   8.,  18.,
#         10.,   7.,  14.,   2.,  17.,  17.,  10.,   8.,  11.,  11.,  15.,
#         15.,   9.,   8.,   8.,  12.,  23.,   9.,   7.,   8.,   6.,   6.,
#          7.,   5.,  10.,  13.,  11.,   7.,  13.,   1.,   8.,  11.,   4.,
#         18.,  11.,  10.,   9.,   7.,   6.,  12.,   9.,  10.,   5.,   4.,
#          8.,   7.,  10.,  11.,np.nan,   6.,   8.,   5.,  10.,   7.,   1.,
#         11.,   7.,  15.,   9.,  17.,   9.,  11.,  13.,   5.,   4.,   4.,
#          6.,   6.,   6.,  11.,   6.,   2.,   5.,  10.,   8.,   3.,  15.,
#         11.,  12.,   5.,  12.,  15.,  13.,   3.,  16.,   5.,   6.,  13.,
#          3.,  14.,  20.,  27.,  12.,  17.,  19.,  13.,  10.,  np.nan,  10.,
#          3.,   8.,   6.,   6.,   9.,   4.,   5.,  11.,   4.,   1.,   7.,
#          3.,  13.,  10.,   6.,   8.,   4.,   9.,  10.,   4.,   6.,   2.,
#         10.,  15.,  11.,  10.,  13.,  14.,   9.,   8.,   8.,   9.,  11.,
#         10.,  16.,  11.,   8.,  20.,   9.,   6.,   9.,   2.,  11.,  18.,
#         10.,  12.,  12.,  13.,  22.,   6.,   4.,   8.,   1.,  10.,   4.,
#          6.,   9.,  16.,   5.,   9.,  10.,  11.,  10.,   5.,  15.,   9.,
#          6.,   9.,   6.,   7.,   7.,  11.,   7.,  17.,   9.,  13.,   9.,
#          8.,  11.,   9.,   8.,   9.,  11.,  11.,  12.,   4.,   7.,  23.,
#          9.,  18.,   6.,  11.,  19.,   7.,   7.,  10.,  14.,   5.,  10.,
#         15.,  22.,   6.,  12.,   4.,  19.,   9.,  15.,  12.,   8.,  18.,
#         10.,   9.,  21.,  11.,   5.,   8.,  14.,   9.,   7.,  10.,   8.,
#         12.,   8.,  12.,   9.,   8.,  12.,   9.,   4.,  15.,   9.,   5.,
#         11.,   9.,   5.,   9.,  15.,  13.,   6.,   7.,   7.,   8.,  11.,
#         13.,   9.,  15.,  30.,  10.,   9.,   7.,  10.,   9.,  17.,  14.,
#          9.,  11.,  10.,   4.,  12.,  20.])
    
#     yest = lowess(x, y)
    import pylab as pl
    pl.clf()
    pl.plot(x, y, 'o', label='y noisy')
    pl.plot(x, yest, '.', label='y pred')
#     pl.plot(x, yest1, '.', label='y pred1')
    pl.legend()
    pl.show()
